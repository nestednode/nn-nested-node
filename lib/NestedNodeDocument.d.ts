import Collection = require('pkg/Collection/Collection');
import EventEmitter = require('pkg/EventEmitter/EventEmitter');
import NestedNode = require('./NestedNode');
import NestedNodeRegistry = require('./NestedNodeRegistry');
import DocumentActions = require('./DocumentActions');
import Direction = require('./Direction');
import SelectionMode = require('./SelectionMode');
declare class NestedNodeDocument<D> extends EventEmitter implements NestedNodeRegistry<D>, DocumentActions {
    protected root: NestedNode<D>;
    content: D;
    private id;
    private nodeRegistry;
    private nodeRegistryCounter;
    private history;
    focusedNode: NestedNode<D>;
    previouslyFocusedNested: Collection.Map<NestedNode<D>, NestedNode<D>>;
    currentFocusLevel: number;
    constructor(data: D);
    protected getBlankNodeData(): D;
    protected nodeDataDuplicator(data: D): D;
    registerNode(node: NestedNode<D>): string;
    unregisterNode(node: NestedNode<D>): void;
    getNodeById(id: string): NestedNode<D>;
    focusNodeById(id: string, selectionMode: SelectionMode): void;
    focusParentNode(): void;
    focusNestedNode(): void;
    focusPrevNode(selectionMode: SelectionMode): void;
    focusNextNode(selectionMode: SelectionMode): void;
    protected focusSiblingNode(direction: Direction, selectionMode: SelectionMode): void;
    protected focusNode(node: NestedNode<D>, selectionMode?: SelectionMode, updateFocusLevel?: boolean): void;
    private setFocusedNode(node, updateFocusLevel?);
    insertNewNode(): void;
    removeNode(): void;
    private executeCommand(cmd);
    undo(): void;
    redo(): void;
    private stepHistory(direction);
}
export = NestedNodeDocument;
